// Advanced Pipeline script including application versioning for Windows environment using PowerShell - from claude sonnet
// Pipeline script for Windows environment using PowerShell
// Handles Node.js app deployment with Docker Compose

pipeline {
    // Specify the agent with Windows label
    agent {
        label 'remote-server-agent'
    }

    // Define environment variables
    environment {
        // Git credentials ID as configured in Jenkins
        GIT_CREDENTIALS = credentials('rithishsamm')
        
        // Docker Compose location - adjust path as needed
        DOCKER_COMPOSE = 'docker-compose'
        
        // Application name for Docker
        APP_NAME = 'Sabarinathan/marketplace_Dwnizo_backend'
    }

    // Pipeline stages
    stages {
        // Source acknowledgement stage
        stage('Source') {
            steps {
                // Clean workspace before checking out
                cleanWs()
                
                script {
                    // Using PowerShell to echo start of source stage
                    powershell '''
                        Write-Host "Starting source stage..."
                    '''
                    
                    // Checkout from Git with credentials
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: '*/sub_branch_Nivetha']],
                        userRemoteConfigs: [[
                            url: 'http://185.100.212.76:7776/Sabarinathan/marketplace_Dwnizo_backend.git',
                            credentialsId: env.GIT_CREDENTIALS
                        ]]
                    ])
                    
                    powershell '''
                        Write-Host "Source checkout completed successfully"
                        dir
                    '''
                }
            }
        }

        // Build stage
        stage('Build') {
            steps {
                script {
                    // Clean any existing Docker resources
                    powershell '''
                        Write-Host "Cleaning existing Docker resources..."
                        if (docker ps -a -q -f name="$env:APP_NAME") {
                            docker stop $env:APP_NAME
                            docker rm $env:APP_NAME
                        }
                        dir
                    '''
                    
                    // Build using Docker Compose
                    powershell '''
                        Write-Host "Starting Docker Compose build..."
                        $env:COMPOSE_CONVERT_WINDOWS_PATHS=1
                        docker-compose build --no-cache
                        dir
                    '''
                }
            }
        }

        // Deploy stage
        stage('Deploy') {
            steps {
                script {
                    // Deploy using Docker Compose
                    powershell '''
                        Write-Host "Starting deployment with Docker Compose..."
                        $env:COMPOSE_CONVERT_WINDOWS_PATHS=1
                        docker compose up -d 
                        
                        # Verify deployment
                        $containerId = docker ps -q -f name="$env:APP_NAME"
                        if ($containerId) {
                            Write-Host "Application deployed successfully!"
                            Write-Host "Container ID: $containerId"
                            docker logs $containerId
                        } else {
                            Write-Error "Deployment failed - container not found"
                            exit 1
                        }
                        dir
                    '''
                }
            }
        }
    }

    // Post-build actions
    post {
        success {
            powershell '''
                Write-Host "Pipeline completed successfully!"
                Write-Host "Build Number: $env:BUILD_NUMBER"
                Write-Host "Workspace: $env:WORKSPACE"
            '''
        }
        failure {
            powershell '''
                Write-Host "Pipeline failed!"
                Write-Host "Please check the logs for details"
            '''
        }
        always {
            // Clean workspace after build
            cleanWs()
        }
    }
}


//last copy of script in prod
// pipeline {
//     agent {
//         label 'remote-server-agent'
//     }

//     environment {
//         GIT_CREDENTIALS = credentials('rithishsamm')
//         DOCKER_COMPOSE = 'docker-compose'
//         APP_NAME = 'Sabarinathan/marketplace_Dwnizo_backend'
//         // Add container names for verification
//         MAIN_CONTAINER = 'marketplace_end'
//         DB_CONTAINER = 'mongo-container'
//     }

//     stages {
//         stage('Source') {
//             steps {
//                 cleanWs()
//                 script {
//                     powershell '''
//                         Write-Host "Starting source stage..."
//                     '''
                    
//                     checkout([
//                         $class: 'GitSCM',
//                         branches: [[name: '*/sub_branch_Nivetha']],
//                         userRemoteConfigs: [[
//                             url: 'http://185.100.212.76:7776/Sabarinathan/marketplace_Dwnizo_backend.git',
//                             credentialsId: env.GIT_CREDENTIALS
//                         ]]
//                     ])
                    
//                     powershell '''
//                         Write-Host "Source checkout completed successfully"
//                         dir
//                     '''
//                 }
//             }
//         }

//         stage('Build') {
//             steps {
//                 script {
//                     powershell '''
//                         Write-Host "Cleaning existing Docker resources..."
//                         # Stop and remove main container if exists
//                         if (docker ps -a -q -f name="$env:MAIN_CONTAINER") {
//                             docker stop $env:MAIN_CONTAINER
//                             docker rm $env:MAIN_CONTAINER
//                         }
//                         # Stop and remove database container if exists
//                         if (docker ps -a -q -f name="$env:DB_CONTAINER") {
//                             docker stop $env:DB_CONTAINER
//                             docker rm $env:DB_CONTAINER
//                         }
//                         dir
//                     '''
                    
//                     powershell '''
//                         Write-Host "Starting Docker Compose build..."
//                         $env:COMPOSE_CONVERT_WINDOWS_PATHS=1
//                         docker-compose build --no-cache
//                         dir
//                     '''
//                 }
//             }
//         }

//         stage('Deploy') {
//             steps {
//                 script {
//                     powershell '''
//                         Write-Host "Starting deployment with Docker Compose..."
//                         $env:COMPOSE_CONVERT_WINDOWS_PATHS=1
//                         docker compose up -d
                        
//                         # Wait for containers to start (give them a few seconds)
//                         Start-Sleep -Seconds 10
                        
//                         # Verify both containers are running
//                         $mainContainer = docker ps -q -f name="$env:MAIN_CONTAINER"
//                         $dbContainer = docker ps -q -f name="$env:DB_CONTAINER"
                        
//                         if ($mainContainer -and $dbContainer) {
//                             Write-Host "Application deployed successfully!"
//                             Write-Host "Main Container ID: $mainContainer"
//                             Write-Host "Database Container ID: $dbContainer"
                            
//                             Write-Host "Main Container Logs:"
//                             docker logs $mainContainer
                            
//                             Write-Host "Database Container Status:"
//                             docker container inspect $dbContainer --format '{{.State.Status}}'
//                         } else {
//                             if (-not $mainContainer) {
//                                 Write-Error "Main application container ($env:MAIN_CONTAINER) not found"
//                             }
//                             if (-not $dbContainer) {
//                                 Write-Error "Database container ($env:DB_CONTAINER) not found"
//                             }
//                             exit 1
//                         }
                        
//                         # Show running containers for verification
//                         Write-Host "Currently running containers:"
//                         docker ps
                        
//                         dir
//                     '''
//                 }
//             }
//         }
//     }

//     post {
//         success {
//             powershell '''
//                 Write-Host "Pipeline completed successfully!"
//                 Write-Host "Build Number: $env:BUILD_NUMBER"
//                 Write-Host "Workspace: $env:WORKSPACE"
//             '''
//         }
//         failure {
//             powershell '''
//                 Write-Host "Pipeline failed!"
//                 Write-Host "Please check the logs for details"
                
//                 # Display container status on failure
//                 Write-Host "Container status:"
//                 docker ps -a
//             '''
//         }
//         always {
//             cleanWs()
//         }
//     }
// }

--------------------------------------------------

// Pipeline script for Windows environment using PowerShell
// Handles Node.js app deployment with Docker Compose and version labeling

// pipeline {
//     agent {
//         label 'windows'
//     }

//     // Define environment variables including version-related variables
//     environment {
//         GIT_CREDENTIALS = credentials('git-credentials-id')
//         DOCKER_COMPOSE = 'docker-compose'
//         APP_NAME = 'node-application'
        
//         // Version-related variables
//         BUILD_VERSION = ''
//         GIT_COMMIT_SHORT = ''
//         RELEASE_VERSION = ''
//     }

//     stages {
//         // Version preparation stage
//         stage('Initialize Version') {
//             steps {
//                 script {
//                     // Get the short Git commit hash
//                     GIT_COMMIT_SHORT = powershell(
//                         returnStdout: true,
//                         script: 'git rev-parse --short HEAD'
//                     ).trim()
                    
//                     // Create a timestamp in the format YYYYMMDD-HHMMSS
//                     def timestamp = powershell(
//                         returnStdout: true,
//                         script: 'Get-Date -Format "yyyyMMdd-HHmmss"'
//                     ).trim()
                    
//                     // Combine build number, timestamp, and git commit for a unique version
//                     BUILD_VERSION = "${BUILD_NUMBER}-${timestamp}"
//                     RELEASE_VERSION = "${BUILD_VERSION}-${GIT_COMMIT_SHORT}"
                    
//                     // Output version information
//                     powershell """
//                         Write-Host "Build Version: ${BUILD_VERSION}"
//                         Write-Host "Git Commit: ${GIT_COMMIT_SHORT}"
//                         Write-Host "Release Version: ${RELEASE_VERSION}"
                        
//                         # Create version file for artifact tracking
//                         @{
//                             BuildNumber = '${BUILD_NUMBER}'
//                             BuildVersion = '${BUILD_VERSION}'
//                             GitCommit = '${GIT_COMMIT_SHORT}'
//                             ReleaseVersion = '${RELEASE_VERSION}'
//                             BuildDate = (Get-Date).ToString('yyyy-MM-dd HH:mm:ss')
//                         } | ConvertTo-Json | Out-File 'version.json'
//                     """
//                 }
//             }
//         }

//         stage('Source') {
//             steps {
//                 cleanWs()
//                 script {
//                     powershell 'Write-Host "Starting source stage..."'
                    
//                     checkout([
//                         $class: 'GitSCM',
//                         branches: [[name: '*/main']],
//                         userRemoteConfigs: [[
//                             url: 'https://your-git-repo-url.git',
//                             credentialsId: env.GIT_CREDENTIALS
//                         ]]
//                     ])
                    
//                     // Add version information to the workspace
//                     powershell """
//                         Write-Host "Source checkout completed successfully"
//                         Write-Host "Version: ${RELEASE_VERSION}"
//                     """
//                 }
//             }
//         }

//         stage('Build') {
//             steps {
//                 script {
//                     // Clean existing Docker resources with version awareness
//                     powershell """
//                         Write-Host "Cleaning existing Docker resources..."
//                         docker images "${env:APP_NAME}*" --format "{{.ID}}" | ForEach-Object {
//                             docker rmi `$_ -f
//                         }
//                     """
                    
//                     // Build using Docker Compose with version tag
//                     powershell """
//                         Write-Host "Starting Docker Compose build..."
//                         `$env:COMPOSE_CONVERT_WINDOWS_PATHS=1
//                         `$env:BUILD_VERSION='${BUILD_VERSION}'
//                         `$env:RELEASE_VERSION='${RELEASE_VERSION}'
                        
//                         # Modify docker-compose command to use build args
//                         docker-compose build --no-cache --build-arg BUILD_VERSION=${BUILD_VERSION} --build-arg RELEASE_VERSION=${RELEASE_VERSION}
                        
//                         # Tag the built image with version information
//                         docker tag ${APP_NAME}:latest ${APP_NAME}:${RELEASE_VERSION}
//                     """
//                 }
//             }
//         }

//         stage('Deploy') {
//             steps {
//                 script {
//                     powershell """
//                         Write-Host "Starting deployment with Docker Compose..."
//                         `$env:COMPOSE_CONVERT_WINDOWS_PATHS=1
//                         `$env:BUILD_VERSION='${BUILD_VERSION}'
//                         `$env:RELEASE_VERSION='${RELEASE_VERSION}'
                        
//                         docker-compose up -d
                        
//                         # Verify deployment with version information
//                         `$containerId = docker ps -q -f name="${APP_NAME}"
//                         if (`$containerId) {
//                             Write-Host "Application deployed successfully!"
//                             Write-Host "Container ID: `$containerId"
//                             Write-Host "Release Version: ${RELEASE_VERSION}"
//                             Write-Host "Build Version: ${BUILD_VERSION}"
//                             docker logs `$containerId
//                         } else {
//                             Write-Error "Deployment failed - container not found"
//                             exit 1
//                         }
//                     """
//                 }
//             }
//         }
//     }

//     post {
//         success {
//             powershell """
//                 Write-Host "Pipeline completed successfully!"
//                 Write-Host "Build Number: ${BUILD_NUMBER}"
//                 Write-Host "Release Version: ${RELEASE_VERSION}"
//                 Write-Host "Workspace: ${WORKSPACE}"
                
//                 # Archive version information
//                 Copy-Item version.json "builds/version-${RELEASE_VERSION}.json"
//             """
//         }
//         failure {
//             powershell """
//                 Write-Host "Pipeline failed!"
//                 Write-Host "Release Version: ${RELEASE_VERSION}"
//                 Write-Host "Please check the logs for details"
//             """
//         }
//         always {
//             cleanWs()
//         }
//     }
// }


// from ChatGPT - Jenkins pipeline for Node.js application deployment using Docker Compose on Windows with PowerShell

// pipeline {
//     agent {
//         label 'remote-server-agent' // Replace with the label of your Windows agent
//     }

//     triggers {
//         pollSCM('0 0 * * *')  // Daily polling at midnight
//     }

//     environment {
//         GIT_CREDENTIALS_ID = 'rithishsamm' // Replace with your Jenkins credential ID for Git
//         REPO_URL = 'http://185.100.212.76:7776/Sabarinathan/marketplace_Dwnizo_backend.git' // Replace with your Git repository URL
//     }
//     stages {
//         stage('Source') {
//             steps {
//                 script {
//                     echo "Acknowledging source stage..."
//                 }
//                 checkout([
//                     $class: 'GitSCM', 
//                     branches: [[name: '*/main']], // Replace 'main' with your branch name
//                     userRemoteConfigs: [[
//                         url: "${env.REPO_URL}",
//                         credentialsId: "${env.GIT_CREDENTIALS_ID}"
//                     ]]
//                 ])
//                 echo "Source code checked out successfully."
//             }
//         }
//         stage('Build') {
//             steps {
//                 powershell '''
//                 Write-Host "Cleaning old workspace..."
//                 if (Test-Path .\\node_modules) {
//                     Remove-Item -Recurse -Force .\\node_modules
//                 }
//                 if (Test-Path .\\docker-compose.yml) {
//                     Write-Host "Docker Compose file exists, moving to Run stage..."
//                 } else {
//                     Write-Host "Docker Compose file not found. Build stage only cleans the workspace."
//                 }
//                 '''
//             }
//         }
//         stage('Run') {
//             steps {
//                 powershell '''
//                 Write-Host "Running Docker Compose..."
//                 docker-compose up -d
//                 '''
//                 echo "Application is running. Build acknowledgment complete."
//             }
//         }
//     }
//     post {
//         always {
//             echo "Pipeline execution completed."
//         }
//     }
// }
